// Code generated by fileb0x at "2018-12-18 12:24:55.799709366 -0800 PST m=+0.003349028" from config file "assets.toml" DO NOT EDIT.
// modification hash(1f291caa87d90f34c8bef90e9c238586.7008e0c4d9ba6ce134212b70daad8b31)

package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileDocsGotmpl is "docs.gotmpl"
var FileDocsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x3c\x8b\xc1\x0a\xc2\x30\x0c\x86\xef\x7d\x8a\x40\xce\xeb\x03\x78\x9e\x1e\x45\xf0\x05\x12\x6a\x2c\x55\xd7\x8e\x6d\x8a\x10\xf2\xee\x92\x32\xbc\x7d\xf9\xf2\xfd\x08\x17\x4e\x4f\xce\x72\x00\xd5\xb8\xf3\x99\x27\x31\x0b\x41\x75\x80\x85\x6b\x16\x88\xa7\x77\x4d\x5b\x69\x75\x94\xfb\x0a\x66\x01\x11\x41\x15\xa2\xa7\x7e\x3b\x8f\x2d\x39\x06\x22\xca\xad\x9b\x6b\xc9\x6e\x88\x28\xf8\x02\xe1\xf8\xe5\x69\x7e\x49\x6f\x1e\xfc\xe1\x35\x2d\x65\xde\x7a\xbb\xbf\xfe\xbd\x2a\x48\xbd\xc1\x60\xf6\x0b\x00\x00\xff\xff\x7b\x61\x49\x9d\xa4\x00\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileDocsGotmpl)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "docs.gotmpl", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
